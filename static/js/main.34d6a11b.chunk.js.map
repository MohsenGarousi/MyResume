{"version":3,"sources":["components/Fullpage.js","components/DownIcon.js","sections/TitleSection.js","sections/AboutSection.js","components/SkillCard.js","sections/SkillSection.js","App.js","serviceWorker.js","index.js"],"names":["Fullpage","children","this","props","className","Component","DownIcon","onClick","style","display","flexDirection","alignItems","justifyContent","marginBottom","transform","src","icon","maxWidth","TitleSection","state","color","cursor","changeColor","setState","onMouseOver","onMouseLeave","data","title","subtitle","Object","keys","links","map","key","url","activeClass","to","spy","smooth","offset","duration","delay","icons","down","console","log","name","AboutSection","sections","items","p","content","SkillCard","skill","image","SkillSection","item","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wsCAeeA,G,uLAXD,IACCC,EAAYC,KAAKC,MAAjBF,SACP,OACI,yBAAKG,UAAS,mBAAcF,KAAKC,MAAMC,WAAa,KAE/CH,O,GANMI,c,QCsBRC,EAtBE,SAACH,GACd,OACI,yBACII,QAAWJ,EAAMI,QACjBC,MAAO,CACHC,QAAS,OACTC,cAAe,MACfC,WAAY,SACZC,eAAgB,SAChBC,aAAc,QACdC,UAAW,sBAGf,yBACIC,IAAKZ,EAAMa,KACXR,MAAO,CACHS,SAAU,Y,gBCmDfC,E,2MA7DXC,MAAQ,CACJC,MAAO,QACPC,OAAQ,Q,EAEZC,YAAc,WACV,EAAKC,SAAS,CACVH,MAA4B,UAArB,EAAKD,MAAMC,MAAoB,SAAW,QACjDC,OAA8B,SAAtB,EAAKF,MAAME,OAAoB,UAAY,U,wEAGjD,IAAD,OACL,OACI,6BACI,kBAAC,EAAD,CAAUjB,UAAU,SAChB,wBAAIA,UAAU,QACVI,MAAO,CACHY,MAAOlB,KAAKiB,MAAMC,MAClBC,OAAQnB,KAAKiB,MAAME,QAEvBG,YAAa,WACT,EAAKF,eAETG,aAAc,WACV,EAAKH,gBAEXI,EAAKC,OAEP,6BACI,4BAAKD,EAAKE,WAEd,yBAAKxB,UAAU,iBAEPyB,OAAOC,KAAKJ,EAAKK,OAAOC,KAAI,SAAAC,GACxB,OACI,yBAAK7B,UAAU,QACX,kBAAC,aAAD,CAAY8B,IAAKR,EAAKK,MAAME,WAOpD,kBAAC,OAAD,CAAME,YAAY,SAASC,GAAG,QAAQC,KAAK,EAAMC,QAAQ,EAAMC,OAAQ,GAAIC,SAAU,IAAKC,MAAO,GAC7F,kBAAC,EAAD,CACIzB,KAAMU,EAAKgB,MAAMC,KACjBpC,QAAS,WACLqC,QAAQC,IAAI,oBAMxB,kBAAC,UAAD,CAASC,KAAK,QAAQ1C,UAAU,iB,GArDrBC,aCgBZ0C,G,uLAjBX,OACE,6BACE,kBAAC,EAAD,CAAU3C,UAAU,UAClB,4BACGsB,EAAKsB,SAAS,GAAGrB,OAEpB,uBAAGvB,UAAU,cACVsB,EAAKsB,SAAS,GAAGC,MAAMjB,KAAI,SAAAkB,GAC1B,OAAO,2BAAIA,EAAEC,mB,GAVA9C,cCiBZ+C,G,uLAlBD,IACEC,EAAUnD,KAAKC,MAAfkD,MACR,OACI,yBAAKjD,UAAU,QACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,MAAMW,IAAKsC,EAAMF,QAAQG,SAE5C,yBAAKlD,UAAU,uBACX,4BAAKiD,EAAMF,QAAQxB,a,GATftB,cCwBTkD,G,uLAnBP,OACI,6BACI,kBAAC,EAAD,CAAUnD,UAAU,SAChB,4BACKsB,EAAKsB,SAAS,GAAGrB,OAEtB,yBAAKvB,UAAU,iBACVsB,EAAKsB,SAAS,GAAGC,MAAMjB,KAAI,SAAAwB,GACxB,OACI,kBAAC,EAAD,CAAWH,MAAOG,c,GAXvBnD,cCiBZoD,G,uLAXX,OADAb,QAAQC,IAAInB,GAEV,yBAAKtB,UAAU,OACb,yBAAKA,UAAU,eACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GATUC,cCIEqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.34d6a11b.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Fullpage.css';\r\n\r\nclass Fullpage extends Component {\r\n    render() {\r\n        const {children} = this.props\r\n        return (\r\n            <div className={`fullpage ${this.props.className || ''}`}>\r\n                {/* {this.props.children} */}\r\n                {children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Fullpage","import React, { Component } from \"react\";\r\nimport data from \"../data.json\";\r\n\r\nconst DownIcon = (props) => {\r\n    return (\r\n        <div\r\n            onClick = {props.onClick}\r\n            style={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                marginBottom: '-34px',\r\n                transform: 'translateY(-45px)'\r\n            }}\r\n        >\r\n            <img\r\n                src={props.icon}\r\n                style={{\r\n                    maxWidth: '30px'\r\n                }} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DownIcon","import React, { Component } from 'react';\r\nimport Fullpage from '../components/Fullpage';\r\nimport { SocialIcon } from 'react-social-icons';\r\nimport DownIcon from '../components/DownIcon';\r\nimport data from \"../../src/data\";\r\nimport './TitleSection.css';\r\nimport { Link, Element } from 'react-scroll'\r\n\r\nclass TitleSection extends Component {\r\n    state = {\r\n        color: 'white',\r\n        cursor: 'none'\r\n    }\r\n    changeColor = () => {\r\n        this.setState({\r\n            color: this.state.color === 'white' ? 'yellow' : 'white',\r\n            cursor: this.state.cursor === 'none' ? 'pointer' : 'none'\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Fullpage className=\"first\">\r\n                    <h1 className=\"title\"\r\n                        style={{\r\n                            color: this.state.color,\r\n                            cursor: this.state.cursor\r\n                        }}\r\n                        onMouseOver={() => {\r\n                            this.changeColor()\r\n                        }}\r\n                        onMouseLeave={() => {\r\n                            this.changeColor()\r\n                        }}\r\n                    >{data.title}\r\n                    </h1>\r\n                    <div>\r\n                        <h2>{data.subtitle}</h2>\r\n                    </div>\r\n                    <div className=\"icons-wrapper\">\r\n                        {\r\n                            Object.keys(data.links).map(key => {\r\n                                return (\r\n                                    <div className=\"icon\">\r\n                                        <SocialIcon url={data.links[key]} />\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                </Fullpage>\r\n                <Link activeClass=\"active\" to=\"about\" spy={true} smooth={true} offset={50} duration={500} delay={0}>\r\n                    <DownIcon\r\n                        icon={data.icons.down}\r\n                        onClick={() => {\r\n                            console.log('I am working')\r\n                        }\r\n\r\n                        }\r\n                    />\r\n                </Link>\r\n                <Element name=\"about\" className=\"element\">\r\n                    \r\n                </Element>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default TitleSection","import React, { Component } from 'react';\r\nimport Fullpage from '../components/Fullpage';\r\nimport data from \"../../src/data\";\r\nimport './AboutSection.css';\r\n\r\nclass AboutSection extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Fullpage className=\"second\">\r\n          <h3>\r\n            {data.sections[0].title}\r\n          </h3>\r\n          <p className=\"paragraphs\">\r\n            {data.sections[0].items.map(p => {\r\n              return <p>{p.content}</p>\r\n            })}\r\n          </p>\r\n        </Fullpage>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AboutSection","import React, { Component } from 'react';\r\nimport './SkillCard.css';\r\n\r\nclass SkillCard extends Component {\r\n    render() {\r\n        const { skill } = this.props;\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"image-wrapper\">\r\n                    <img className=\"img\" src={skill.content.image} />\r\n                </div>\r\n                <div className=\"skill-title-wrapper\">\r\n                    <h4>{skill.content.title}</h4>\r\n                </div>\r\n                {/* <div>\r\n            <img src=\"src/images/logo192.png\"/>\r\n            </div> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SkillCard","import React, { Component } from 'react';\r\nimport Fullpage from '../components/Fullpage';\r\nimport data from \"../../src/data\";\r\nimport SkillCard from '../components/SkillCard';\r\nimport './SkillSection.css';\r\n\r\nclass SkillSection extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Fullpage className=\"third\">\r\n                    <h3>\r\n                        {data.sections[1].title}\r\n                    </h3>\r\n                    <div className=\"cards-wrapper\">\r\n                        {data.sections[1].items.map(item => {\r\n                            return (\r\n                                <SkillCard skill={item}/>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </Fullpage>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SkillSection","import React, { Component } from \"react\";\nimport data from \"./data.json\";\nimport TitleSection from './sections/TitleSection';\nimport AboutSection from './sections/AboutSection';\nimport SkillSection from './sections/SkillSection';\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  render() {\n    console.log(data)\n    return (\n      <div className=\"App\">\n        <div className=\"navigation\"></div>\n        <TitleSection />\n        <AboutSection />\n        <SkillSection/>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}